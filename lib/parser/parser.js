module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(n, ns) {
        			return isArray(n) ? n.concat(ns) : [n].concat(ns) ;
        		},
        peg$c1 = function(n) {
        			return isArray(n) ? n : [n];
        		},
        peg$c2 = "<",
        peg$c3 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c4 = "!--",
        peg$c5 = { type: "literal", value: "!--", description: "\"!--\"" },
        peg$c6 = "input",
        peg$c7 = { type: "literal", value: "input", description: "\"input\"" },
        peg$c8 = "/",
        peg$c9 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c10 = ">",
        peg$c11 = { type: "literal", value: ">", description: "\">\"" },
        peg$c12 = function(tagName, attrs) {
        			return {
        				//@property {String} type Value 'htmlOpenNode'
        				type: 'htmlOpenNode'
        				//@property {String} tag
        			,	tag: tagName
        				//@property {Array<AttributeASTNode>} attributes
        			,	attributes: attrs || []
        			};
        		},
        peg$c13 = function(tagName, attrs) {
        			return {
        				//@property {String} type Value 'htmlVoidNode'
        				type: 'htmlVoidNode'
        				//@property {String?} tag This attribute will be null in can the node is of type 'htmlComment'
        			,	tag: tagName
        				//@property {Array<AttributeASTNode>} attributes
        			,	attributes: attrs || []
        			};
        		},
        peg$c14 = "</",
        peg$c15 = { type: "literal", value: "</", description: "\"</\"" },
        peg$c16 = function(tagName, attrs) {
        			return {
        				//@property {String} type Value 'htmlCloseNode'
        				type: 'htmlCloseNode'
        				//@property {String?} tag This attribute will be null in can the node is of type 'htmlComment'
        			,	tag: tagName
        				//@property {Array<AttributeASTNode>} attributes
        			,	attributes: attrs || []
        			};
        		},
        peg$c17 = "<!--",
        peg$c18 = { type: "literal", value: "<!--", description: "\"<!--\"" },
        peg$c19 = "-->",
        peg$c20 = { type: "literal", value: "-->", description: "\"-->\"" },
        peg$c21 = function(c) {
        			return {
        				//@property {String} type Value 'htmlCommentNode'
        				type: 'htmlCommentNode'
        				//@property {String?} value This property that contains the comment it self will be only present if the node is a comment
        			,	value: c.join('')
        			};
        		},
        peg$c22 = "<input",
        peg$c23 = { type: "literal", value: "<input", description: "\"<input\"" },
        peg$c24 = "</input>",
        peg$c25 = { type: "literal", value: "</input>", description: "\"</input>\"" },
        peg$c26 = function(attrs, ns) {
        			return [
        				{
        					type: 'htmlOpenNode'
        				,	tag: 'input'
        				,	attributes: attrs
        				}
        			,	{
        					type: 'htmlCloseNode'
        				,	tag: 'input'
        				,	attributes: []
        				}
        			];
        		},
        peg$c27 = function(attrs) {
        			return {
        				type: 'htmlVoidNode'
        			,	tag: 'input'
        			,	attributes: attrs
        			};
        		},
        peg$c28 = { type: "any", description: "any character" },
        peg$c29 = function(c) {
        			return c;
        		},
        peg$c30 = "area",
        peg$c31 = { type: "literal", value: "area", description: "\"area\"" },
        peg$c32 = "base",
        peg$c33 = { type: "literal", value: "base", description: "\"base\"" },
        peg$c34 = "basefont",
        peg$c35 = { type: "literal", value: "basefont", description: "\"basefont\"" },
        peg$c36 = "br",
        peg$c37 = { type: "literal", value: "br", description: "\"br\"" },
        peg$c38 = "col",
        peg$c39 = { type: "literal", value: "col", description: "\"col\"" },
        peg$c40 = "command",
        peg$c41 = { type: "literal", value: "command", description: "\"command\"" },
        peg$c42 = "embed",
        peg$c43 = { type: "literal", value: "embed", description: "\"embed\"" },
        peg$c44 = "frame",
        peg$c45 = { type: "literal", value: "frame", description: "\"frame\"" },
        peg$c46 = "hr",
        peg$c47 = { type: "literal", value: "hr", description: "\"hr\"" },
        peg$c48 = "img",
        peg$c49 = { type: "literal", value: "img", description: "\"img\"" },
        peg$c50 = "isindex",
        peg$c51 = { type: "literal", value: "isindex", description: "\"isindex\"" },
        peg$c52 = "keygen",
        peg$c53 = { type: "literal", value: "keygen", description: "\"keygen\"" },
        peg$c54 = "link",
        peg$c55 = { type: "literal", value: "link", description: "\"link\"" },
        peg$c56 = "meta",
        peg$c57 = { type: "literal", value: "meta", description: "\"meta\"" },
        peg$c58 = "param",
        peg$c59 = { type: "literal", value: "param", description: "\"param\"" },
        peg$c60 = "source",
        peg$c61 = { type: "literal", value: "source", description: "\"source\"" },
        peg$c62 = "track",
        peg$c63 = { type: "literal", value: "track", description: "\"track\"" },
        peg$c64 = "wbr",
        peg$c65 = { type: "literal", value: "wbr", description: "\"wbr\"" },
        peg$c66 = "path",
        peg$c67 = { type: "literal", value: "path", description: "\"path\"" },
        peg$c68 = "circle",
        peg$c69 = { type: "literal", value: "circle", description: "\"circle\"" },
        peg$c70 = "ellipse",
        peg$c71 = { type: "literal", value: "ellipse", description: "\"ellipse\"" },
        peg$c72 = "line",
        peg$c73 = { type: "literal", value: "line", description: "\"line\"" },
        peg$c74 = "rect",
        peg$c75 = { type: "literal", value: "rect", description: "\"rect\"" },
        peg$c76 = "use",
        peg$c77 = { type: "literal", value: "use", description: "\"use\"" },
        peg$c78 = "stop",
        peg$c79 = { type: "literal", value: "stop", description: "\"stop\"" },
        peg$c80 = "polyline",
        peg$c81 = { type: "literal", value: "polyline", description: "\"polyline\"" },
        peg$c82 = "polygon",
        peg$c83 = { type: "literal", value: "polygon", description: "\"polygon\"" },
        peg$c84 = function(w) {
        			return {
        				//@property {String} type Value 'text'
        				type: 'text'
        				//@property {String} value
        			,	value: w.join('')
        			};
        		},
        peg$c85 = /^[^>}{<\n\t]/,
        peg$c86 = { type: "class", value: "[^>}{<\\n\\t]", description: "[^>}{<\\n\\t]" },
        peg$c87 = function(w) {
        			return w;
        		},
        peg$c88 = "{{#if",
        peg$c89 = { type: "literal", value: "{{#if", description: "\"{{#if\"" },
        peg$c90 = "}}",
        peg$c91 = { type: "literal", value: "}}", description: "\"}}\"" },
        peg$c92 = "{{/if}}",
        peg$c93 = { type: "literal", value: "{{/if}}", description: "\"{{/if}}\"" },
        peg$c94 = function(condition, ifBody, elseBody) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'IF'
        			,	subType: 'IF'
        				//@property {HandlebarsBaseConditionNodeAST} condition
        			,	condition: getHandlebarsBaseConditionObject(condition)
        				//@property {Array<NodeASTNode>} ifBody
        			,	ifBody: ifBody || []
        				//@property {Array<NodeASTNode>} elseBody
        			,	elseBody: elseBody || []
        			};
        		},
        peg$c95 = "{{#each",
        peg$c96 = { type: "literal", value: "{{#each", description: "\"{{#each\"" },
        peg$c97 = "{{/each}}",
        peg$c98 = { type: "literal", value: "{{/each}}", description: "\"{{/each}}\"" },
        peg$c99 = function(iterator, eachBody, elseBody) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'EACH'
        			,	subType: 'EACH'
        				//@property {HandlebarsBaseConditionNodeAST} iterator
        			,	iterator: getHandlebarsBaseConditionObject(iterator)
        				//@property {Array<NodeASTNode>} eachBody
        			,	eachBody: eachBody || []
        				//@property {Array<NodeASTNode>} elseBody
        			,	elseBody: elseBody || []
        			};
        		},
        peg$c100 = "{{#unless",
        peg$c101 = { type: "literal", value: "{{#unless", description: "\"{{#unless\"" },
        peg$c102 = "{{/unless}}",
        peg$c103 = { type: "literal", value: "{{/unless}}", description: "\"{{/unless}}\"" },
        peg$c104 = function(condition, unlessBody, elseBody) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'UNLESS'
        			,	subType: 'UNLESS'
        				//@property {HandlebarsBaseConditionNodeAST} condition
        			,	condition: getHandlebarsBaseConditionObject(condition)
        				//@property {Array<NodeASTNode>} unlessBody
        			,	unlessBody: unlessBody || []
        				//@property {Array<NodeASTNode>} elseBody
        			,	elseBody: elseBody || []
        			};
        		},
        peg$c105 = "{{#",
        peg$c106 = { type: "literal", value: "{{#", description: "\"{{#\"" },
        peg$c107 = "{{/",
        peg$c108 = { type: "literal", value: "{{/", description: "\"{{/\"" },
        peg$c109 = function(openTagName, params, children, closeTagName) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'GENERICBLOCK'
        			,	subType: 'GENERICBLOCK'
        				//@property {String} openTag
        			,	openTag: openTagName
        				//@property {String} closeTag
        			,	closeTag: closeTagName
        				//@property {Array<ParameterHandlebarsNodeASTNode>} parameters
        			,	parameters: params || []
        				//@property {Array<NodeASTNode>} children
        			,	children: children || []
        			};
        		},
        peg$c110 = "{{else}}",
        peg$c111 = { type: "literal", value: "{{else}}", description: "\"{{else}}\"" },
        peg$c112 = function(ns) {
        			return ns || [];
        		},
        peg$c113 = "{{",
        peg$c114 = { type: "literal", value: "{{", description: "\"{{\"" },
        peg$c115 = ".",
        peg$c116 = { type: "literal", value: ".", description: "\".\"" },
        peg$c117 = "else",
        peg$c118 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c119 = function(w) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Possible values:
        				// 'SAFEREFERENCEEVALUATION' in case the value starts with '@',
        				// 'SAFEEVALUATION' otherwise
        			,	subType: w.indexOf('@') === 0 ? 'SAFEREFERENCEEVALUATION' : 'SAFEEVALUATION'
        				//@property {String} value
        			,	value: w
        			};
        		},
        peg$c120 = "{{{",
        peg$c121 = { type: "literal", value: "{{{", description: "\"{{{\"" },
        peg$c122 = "}}}",
        peg$c123 = { type: "literal", value: "}}}", description: "\"}}}\"" },
        peg$c124 = function(w) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Possible values:
        				// 'UNSAFEREFERENCEEVALUATION' in case the value starts with '@',
        				// 'UNSAFEEVALUATION' otherwise
        			,	subType: w.indexOf('@') === 0 ? 'UNSAFEREFERENCEEVALUATION' : 'UNSAFEEVALUATION'
        				//@property {String} value
        			,	value: w
        			};
        		},
        peg$c125 = function(w) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'LOOKUPSINGLE'
        			,	subType: 'LOOKUPSINGLE'
        				//@property {Array<String>} value
        			,	value: w
        			};
        		},
        peg$c126 = "{{!--",
        peg$c127 = { type: "literal", value: "{{!--", description: "\"{{!--\"" },
        peg$c128 = "--}}",
        peg$c129 = { type: "literal", value: "--}}", description: "\"--}}\"" },
        peg$c130 = function(c) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'SINGLECOMMENTS'
        			,	subType: 'SINGLECOMMENTS'
        				//@property {String} value
        			,	value: c.join('')
        			};
        		},
        peg$c131 = function(t) {
        			return t;
        		},
        peg$c132 = function(w, ps) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'GENERICSINGLE'
        			,	subType: 'GENERICSINGLE'
        				//@property {String} value
        			,	value: w
        				//@property {Array<ParameterHandlebarsNodeASTNode>} parameters
        			,	parameters: ps
        			};
        		},
        peg$c133 = function(w, ps) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'UNSAFEGENERICSINGLE'
        			,	subType: 'UNSAFEGENERICSINGLE'
        				//@property {String} value
        			,	value: w
        				//@property {Array<ParameterHandlebarsNodeASTNode>} parameters
        			,	parameters: ps
        			};
        		},
        peg$c134 = function(w, ws) {
        			return [w].concat(ws);
        		},
        peg$c135 = function(w) {
        			return [w];
        		},
        peg$c136 = function(p, ps) {
        			return p.concat(ps);
        		},
        peg$c137 = "'",
        peg$c138 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c139 = function(ws) {
        			return [{
        				//@property {String} type Value 'parameter'
        				type: 'parameter'
        				//@property {String} subType Possible values:
        				// 'SIMPLEVALUE' in case of a simple string parameter (in the case it appears between quotes in the template),
        				// 'LOOKUPSINGLE' when the value property is an array of strings,
        				// 'REFERENCEEVALUATION' in case the value property is a reference evaluation (starts with '@'),
        				// 'SINGLEEVALUATION' otherwise (when the value represents a simple variable evaluation)
        			,	subType: 'SIMPLEVALUE'
        				//@property {String|Array<String>} value
        			,	value: "'" + ws.join('') + "'"
        			}];
        		},
        peg$c140 = "\"",
        peg$c141 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c142 = function(ws) {
        			return [{
        				type: 'parameter'
        			,	subType: 'SIMPLEVALUE'
        			,	value: '"' + ws.join('') + '"'
        			}];
        		},
        peg$c143 = function(l) {
        			return [getHandlebarsBaseConditionObject(l, 'parameter')];
        		},
        peg$c144 = "\\'",
        peg$c145 = { type: "literal", value: "\\'", description: "\"\\\\'\"" },
        peg$c146 = /^[^']/,
        peg$c147 = { type: "class", value: "[^']", description: "[^']" },
        peg$c148 = "\\\"",
        peg$c149 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
        peg$c150 = /^[^"]/,
        peg$c151 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c152 = function(il) {
        			return isArray(il) ? il : [il];
        		},
        peg$c153 = function(props, spaces, itemList) {
        			return generateAndConcatAttributeSpaceNode(props, spaces, itemList);
        		},
        peg$c154 = "/>",
        peg$c155 = { type: "literal", value: "/>", description: "\"/>\"" },
        peg$c156 = function(prop, spaces, props) {
        			return generateAndConcatAttributeSpaceNode(prop, spaces, props);
        		},
        peg$c157 = function(as) {
        			return as;
        		},
        peg$c158 = "=",
        peg$c159 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c160 = function(k, v) {
        			return {
        				//@property {String} type Value 'keyValue'
        				type: 'keyValue'
        				//@property {String} key
        			,	key: k.value
        				//@property {Array<SimpleValueHTMLAttributeASTNode>} value
        			,	value: v
        			};
        		},
        peg$c161 = function(pk) {
        			return pk;
        		},
        peg$c162 = /^[^ "'{}=>]/,
        peg$c163 = { type: "class", value: "[^ \"'{}=>]", description: "[^ \"'{}=>]" },
        peg$c164 = function(keyName) {
        			return {
        				//@property {String} type Value 'singleKey'
        				type: "singleKey"
        				//@property {String} value
        			,	value: keyName.join('')
        			};
        		},
        peg$c165 = function(spaces, values) {
        			return concatSortedSpaces(spaces, values);
        		},
        peg$c166 = function(spaces) {
        			if (spaces && spaces.length)
        			{
        				return concatSortedSpaces(spaces);
        			}

        			return [{
        				//@property {String} type Value 'singleValue'
        				type: 'singleValue'
        				//@property {String} value
        			,	value: ''
        			}];
        		},
        peg$c167 = function(v, spaces, vs) {
        			return generateAndConcatAttributeSpaceNode(v, spaces, vs);
        		},
        peg$c168 = function(v, spaces) {
        			return generateAndConcatAttributeSpaceNode(v, spaces);
        		},
        peg$c169 = /^[^ '{}]/,
        peg$c170 = { type: "class", value: "[^ '{}]", description: "[^ '{}]" },
        peg$c171 = function(valueName) {
        			return {
        				type: 'singleValue'
        			,	value: valueName.join('')
        			};
        		},
        peg$c172 = function(spaces, values) {
        			return concatSortedSpaces(spaces, values);
        			// return values;
        		},
        peg$c173 = function(spaces) {
        			if (spaces && spaces.length)
        			{
        				return concatSortedSpaces(spaces);
        			}

        			return [{
        				type: 'singleValue'
        			,	value: ''
        			}];
        		},
        peg$c174 = /^[^ "{}]/,
        peg$c175 = { type: "class", value: "[^ \"{}]", description: "[^ \"{}]" },
        peg$c176 = function(h, spaces, hs) {
        			return generateAndConcatAttributeSpaceNode(h, spaces, hs);
        		},
        peg$c177 = function(condition, s1, ifBody, s2, elseBody, s3) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'ATTRIF'
        			,	subType: 'ATTRIF'
        				//@property {HandlebarsBaseConditionNodeAST} condition
        			,	condition: getHandlebarsBaseConditionObject(condition, null, 'ATTR')
        				//@property {Array<AttributeASTNode>} ifBody
        			,	ifBody: concatSortedSpaces(s1, ifBody || [], s2)
        				//@property {Array<AttributeASTNode>} elseBody
        			,	elseBody: concatSortedSpaces(null, elseBody || [], s3)
        			};
        		},
        peg$c178 = function(iterator, s1, eachBody, s2, elseBody, s3) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'ATTREACH'
        			,	subType: 'ATTREACH'
        				//@property {HandlebarsBaseConditionNodeAST} iterator
        			,	iterator: getHandlebarsBaseConditionObject(iterator, null, 'ATTR')
        				//@property {Array<AttributeASTNode>} eachBody
        			,	eachBody: concatSortedSpaces(s1, eachBody || [], s2)
        				//@property {Array<AttributeASTNode>} elseBody
        			,	elseBody: concatSortedSpaces(null, elseBody || [], s3)
        			};
        		},
        peg$c179 = function(condition, s1, unlessBody, s2, elseBody, s3) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'ATTRUNLESS'
        			,	subType: 'ATTRUNLESS'
        				//@property {HandlebarsBaseConditionNodeAST} condition
        			,	condition: getHandlebarsBaseConditionObject(condition, null, 'ATTR')
        				//@property {Array<AttributeASTNode>} unlessBody
        			,	unlessBody: concatSortedSpaces(s1, unlessBody || [], s2)
        				//@property {Array<AttributeASTNode>} elseBody
        			,	elseBody: concatSortedSpaces(null, elseBody || [], s3)
        			};
        		},
        peg$c180 = function(spaces, il) {
        			return concatSortedSpaces(spaces, il || []);
        		},
        peg$c181 = function(openName, params, l, closeName) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'ATTRGENERICBLOCK'
        			,	subType: 'ATTRGENERICBLOCK'
        				//@property {Array<AttributeASTNode>} value
        			,	value: l || []
        				//@property {String} openTag
        			,	openTag: openName
        				//@property {String} closeTag
        			,	closeTag: closeName
        				//@property {Array<ParameterHandlebarsNodeASTNode>} parameters
        			,	parameters: params
        			};
        		},
        peg$c182 = function(value) {
        			return getHandlebarsBaseConditionObject(value, null, 'ATTR');
        		},
        peg$c183 = function(v, parameterList) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'ATTRGENERICSINGLE'
        			,	subType: 'ATTRGENERICSINGLE'
        				//@property {String} value
        			,	value: v
        				//@property {Array<ParameterHandlebarsNodeASTNode>} parameters
        			,	parameters: parameterList || []
        			};
        		},
        peg$c184 = function(value) {
        			return getHandlebarsBaseConditionObject(value, null, 'ATTRUNSAFE');
        		},
        peg$c185 = function(v, parameterList) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'ATTRUNSAFEGENERICSINGLE'
        			,	subType: 'ATTRUNSAFEGENERICSINGLE'
        				//@property {String} value
        			,	value: v
        				//@property {Array<ParameterHandlebarsNodeASTNode>} parameters
        			,	parameters: parameterList || []
        			};
        		},
        peg$c186 = function(c) {
        			return {
        				//@property {String} type Value 'handlebars'
        				type: 'handlebars'
        				//@property {String} subType Value 'ATTRSINGLECOMMENTS'
        			,	subType: 'ATTRSINGLECOMMENTS'
        				//@property {String} value
        			,	value: c.join('')
        			};
        		},
        peg$c187 = /^[^ '"\/><{}\t]/,
        peg$c188 = { type: "class", value: "[^ '\"/><{}\\t]", description: "[^ '\"/><{}\\t]" },
        peg$c189 = function(w) {
        			return w.join('');
        		},
        peg$c190 = /^[ \n\t]/,
        peg$c191 = { type: "class", value: "[ \\n\\t]", description: "[ \\n\\t]" },
        peg$c192 = " ",
        peg$c193 = { type: "literal", value: " ", description: "\" \"" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsenodes();

      return s0;
    }

    function peg$parsenodes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsenode();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenodes();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenode();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenode() {
      var s0;

      s0 = peg$parsehtmlNode();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetextNode();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehandlebarsNode();
        }
      }

      return s0;
    }

    function peg$parsehtmlNode() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseignorable();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseignorable();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s2 = peg$c2;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 3) === peg$c4) {
            s4 = peg$c4;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 5) === peg$c6) {
              s5 = peg$c6;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parsevoidElement();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseword();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseignorable();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseignorable();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseattributes();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseignorable();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseignorable();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 47) {
                          s11 = peg$c8;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c9); }
                        }
                        peg$silentFails--;
                        if (s11 === peg$FAILED) {
                          s10 = void 0;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 62) {
                            s11 = peg$c10;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c11); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parseignorable();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseignorable();
                            }
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c12(s6, s8);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseignorable();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseignorable();
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s2 = peg$c2;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 3) === peg$c4) {
              s4 = peg$c4;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = void 0;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsevoidElement();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseignorable();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseignorable();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseattributes();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseignorable();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseignorable();
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 47) {
                        s8 = peg$c8;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c9); }
                      }
                      if (s8 === peg$FAILED) {
                        s8 = null;
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                          s9 = peg$c10;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c11); }
                        }
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c13(s4, s6);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseignorable();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseignorable();
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c14) {
              s2 = peg$c14;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseignorable();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseignorable();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 5) === peg$c6) {
                  s5 = peg$c6;
                  peg$currPos += 5;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = void 0;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseword();
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseignorable();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseignorable();
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseattributes();
                      if (s7 === peg$FAILED) {
                        s7 = null;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parseignorable();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parseignorable();
                        }
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 62) {
                            s9 = peg$c10;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c11); }
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = [];
                            s11 = peg$parseignorable();
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$parseignorable();
                            }
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c16(s5, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseignorable();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseignorable();
            }
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c17) {
                s2 = peg$c17;
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsehtmlCommentToken();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsehtmlCommentToken();
                }
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c19) {
                    s4 = peg$c19;
                    peg$currPos += 3;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c21(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseignorable();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseignorable();
              }
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c22) {
                  s2 = peg$c22;
                  peg$currPos += 6;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c23); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parseignorable();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseignorable();
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseattributes();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parseignorable();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseignorable();
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                          s6 = peg$c10;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c11); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = [];
                          s8 = peg$parsenode();
                          while (s8 !== peg$FAILED) {
                            s7.push(s8);
                            s8 = peg$parsenode();
                          }
                          if (s7 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c24) {
                              s8 = peg$c24;
                              peg$currPos += 8;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c25); }
                            }
                            if (s8 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c26(s4, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseignorable();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseignorable();
                }
                if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c22) {
                    s2 = peg$c22;
                    peg$currPos += 6;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c23); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseignorable();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parseignorable();
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseattributes();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parseignorable();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parseignorable();
                        }
                        if (s5 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 47) {
                            s6 = peg$c8;
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                          }
                          if (s6 === peg$FAILED) {
                            s6 = null;
                          }
                          if (s6 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 62) {
                              s7 = peg$c10;
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c11); }
                            }
                            if (s7 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c27(s4);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsehtmlCommentToken() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c19) {
        s2 = peg$c19;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c29(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevoidElement() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c30) {
        s0 = peg$c30;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c32) {
          s0 = peg$c32;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c34) {
            s0 = peg$c34;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c36) {
              s0 = peg$c36;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c38) {
                s0 = peg$c38;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c40) {
                  s0 = peg$c40;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c42) {
                    s0 = peg$c42;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c43); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c44) {
                      s0 = peg$c44;
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c45); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c46) {
                        s0 = peg$c46;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c47); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c48) {
                          s0 = peg$c48;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c49); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c50) {
                            s0 = peg$c50;
                            peg$currPos += 7;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c51); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c52) {
                              s0 = peg$c52;
                              peg$currPos += 6;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c53); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c54) {
                                s0 = peg$c54;
                                peg$currPos += 4;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c55); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c56) {
                                  s0 = peg$c56;
                                  peg$currPos += 4;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c58) {
                                    s0 = peg$c58;
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c60) {
                                      s0 = peg$c60;
                                      peg$currPos += 6;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5) === peg$c62) {
                                        s0 = peg$c62;
                                        peg$currPos += 5;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c63); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c64) {
                                          s0 = peg$c64;
                                          peg$currPos += 3;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c65); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c66) {
                                            s0 = peg$c66;
                                            peg$currPos += 4;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c67); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 6) === peg$c68) {
                                              s0 = peg$c68;
                                              peg$currPos += 6;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c69); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 7) === peg$c70) {
                                                s0 = peg$c70;
                                                peg$currPos += 7;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c71); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 4) === peg$c72) {
                                                  s0 = peg$c72;
                                                  peg$currPos += 4;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c73); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 4) === peg$c74) {
                                                    s0 = peg$c74;
                                                    peg$currPos += 4;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c75); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 3) === peg$c76) {
                                                      s0 = peg$c76;
                                                      peg$currPos += 3;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c78) {
                                                        s0 = peg$c78;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 8) === peg$c80) {
                                                          s0 = peg$c80;
                                                          peg$currPos += 8;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c81); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 7) === peg$c82) {
                                                            s0 = peg$c82;
                                                            peg$currPos += 7;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c83); }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetextNode() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseignorable();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseignorable();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewordWithSlash();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsewordWithSlash();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseignorable();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseignorable();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c84(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsewordWithSlash() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c85.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c87(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehandlebarsNode() {
      var s0;

      s0 = peg$parsehandlebarsBlockNode();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehandlebarsSingleNode();
      }

      return s0;
    }

    function peg$parsehandlebarsBlockNode() {
      var s0;

      s0 = peg$parsehandlebarsIfBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehandlebarsEachBlock();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehandlebarsUnlessBlock();
          if (s0 === peg$FAILED) {
            s0 = peg$parsehandlebarsGenericBlock();
          }
        }
      }

      return s0;
    }

    function peg$parsehandlebarsIfBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseignorable();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseignorable();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c88) {
          s2 = peg$c88;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c89); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselookUpWords();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c90) {
                  s6 = peg$c90;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseignorable();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseignorable();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsenodes();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseignorable();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseignorable();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsehandlebarsElseBlock();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parseignorable();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parseignorable();
                          }
                          if (s11 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c92) {
                              s12 = peg$c92;
                              peg$currPos += 7;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c93); }
                            }
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c94(s4, s8, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsEachBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseignorable();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseignorable();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c95) {
          s2 = peg$c95;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselookUpWords();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c90) {
                  s6 = peg$c90;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseignorable();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseignorable();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsenodes();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseignorable();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseignorable();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsehandlebarsElseBlock();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parseignorable();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parseignorable();
                          }
                          if (s11 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 9) === peg$c97) {
                              s12 = peg$c97;
                              peg$currPos += 9;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c98); }
                            }
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c99(s4, s8, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsUnlessBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseignorable();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseignorable();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c100) {
          s2 = peg$c100;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselookUpWords();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c90) {
                  s6 = peg$c90;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseignorable();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseignorable();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsenodes();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseignorable();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseignorable();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsehandlebarsElseBlock();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parseignorable();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parseignorable();
                          }
                          if (s11 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 11) === peg$c102) {
                              s12 = peg$c102;
                              peg$currPos += 11;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c103); }
                            }
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c104(s4, s8, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsGenericBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c105) {
        s1 = peg$c105;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseword();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseparams();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c90) {
                    s7 = peg$c90;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseignorable();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseignorable();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsenodes();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseignorable();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseignorable();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c107) {
                            s11 = peg$c107;
                            peg$currPos += 3;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c108); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseword();
                            if (s12 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c90) {
                                s13 = peg$c90;
                                peg$currPos += 2;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c91); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c109(s3, s5, s9, s12);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsElseBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c110) {
        s1 = peg$c110;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenodes();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c112(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsSingleNode() {
      var s0;

      s0 = peg$parsehandlebarsSafeEvaluation();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehandlebarsUnSafeEvaluation();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehandlebarsLookup();
          if (s0 === peg$FAILED) {
            s0 = peg$parsehandlebarsSingleComment();
            if (s0 === peg$FAILED) {
              s0 = peg$parsehandlebarsSafeGenericSingle();
              if (s0 === peg$FAILED) {
                s0 = peg$parsehandlebarsUnSafeGenericSingle();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsehandlebarsSafeEvaluation() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c115;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 4) === peg$c117) {
            s4 = peg$c117;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c118); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseword();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c90) {
                    s7 = peg$c90;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c119(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsUnSafeEvaluation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c120) {
        s1 = peg$c120;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseword();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c122) {
                s5 = peg$c122;
                peg$currPos += 3;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c123); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c124(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsLookup() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 4) === peg$c117) {
          s3 = peg$c117;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselookUpWords();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c90) {
                  s6 = peg$c90;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c125(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsSingleComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c126) {
        s1 = peg$c126;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsehandlebarsSingleCommentToken();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsehandlebarsSingleCommentToken();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c128) {
            s3 = peg$c128;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c129); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c130(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsSingleCommentToken() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c128) {
        s2 = peg$c128;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c131(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsSafeGenericSingle() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c115;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 3) === peg$c4) {
            s4 = peg$c4;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseword();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsespace();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseparams();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c90) {
                        s9 = peg$c90;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c91); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c132(s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsUnSafeGenericSingle() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c120) {
        s1 = peg$c120;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c115;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 3) === peg$c4) {
            s4 = peg$c4;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseword();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsespace();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsespace();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseparams();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsespace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsespace();
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c122) {
                      s8 = peg$c122;
                      peg$currPos += 3;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c123); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c133(s4, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselookUpWords() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseword();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c8;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselookUpWords();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c134(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseword();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c135(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseparams() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseparam();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparams();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c136(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseparam();
      }

      return s0;
    }

    function peg$parseparam() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c137;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseparamTokenSingleQuote();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseparamTokenSingleQuote();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c137;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c138); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c139(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c140;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseparamTokenDoubleQuote();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseparamTokenDoubleQuote();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c140;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c141); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c142(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselookUpWords();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c143(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseparamTokenSingleQuote() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c144) {
        s0 = peg$c144;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c146.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
      }

      return s0;
    }

    function peg$parseparamTokenDoubleQuote() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c148) {
        s0 = peg$c148;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c150.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
      }

      return s0;
    }

    function peg$parseattributes() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseitemList();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c152(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseitemList() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseattributesSimple();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseitemList();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c153(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseattributesHandlebars();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseignorable();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseignorable();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseitemList();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c153(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseattributesSimple();
          if (s0 === peg$FAILED) {
            s0 = peg$parseattributesHandlebars();
          }
        }
      }

      return s0;
    }

    function peg$parseattributesSimple() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c154) {
        s2 = peg$c154;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 62) {
          s3 = peg$c10;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c11); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeSimple();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseignorable();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseignorable();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseattributesSimple();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c156(s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c154) {
          s2 = peg$c154;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c155); }
        }
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = void 0;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c10;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseattributeSimple();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c157(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseattributeSimple() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseattributeSimpleKeyWrapper();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeSimpleValueWrapper();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c160(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseattributeSimpleKeyWrapper();
      }

      return s0;
    }

    function peg$parseattributeSimpleKeyWrapper() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c140;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseattributeSimpleKey();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c140;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c141); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c161(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c137;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c138); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseattributeSimpleKey();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c137;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c138); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c161(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseattributeSimpleKey();
        }
      }

      return s0;
    }

    function peg$parseattributeSimpleKey() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c162.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c162.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c163); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c164(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattributeSimpleValueWrapper() {
      var s0;

      s0 = peg$parseattributeSimpleValueWrapperSingleQuote();
      if (s0 === peg$FAILED) {
        s0 = peg$parseattributeSimpleValueWrapperDoubleQuote();
      }

      return s0;
    }

    function peg$parseattributeSimpleValueWrapperSingleQuote() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c137;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeSimpleValuesSingleQuote();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s4 = peg$c137;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c138); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c165(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c137;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c138); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseignorable();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseignorable();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c137;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c138); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c166(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseattributeSimpleValuesSingleQuote() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseattributeSimpleValueSingleQuote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeSimpleValuesSingleQuote();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c167(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseattributeSimpleValueSingleQuote();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseignorable();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseignorable();
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c168(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseattributeSimpleValueSingleQuote() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c169.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c169.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c170); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c171(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseattributesHandlebars();
      }

      return s0;
    }

    function peg$parseattributeSimpleValueWrapperDoubleQuote() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c140;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeSimpleValuesDoubleQuote();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c140;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c141); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c172(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c140;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseignorable();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseignorable();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c140;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c141); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c173(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseattributeSimpleValuesDoubleQuote() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseattributeSimpleValueDoubleQuote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeSimpleValuesDoubleQuote();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c167(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseattributeSimpleValueDoubleQuote();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseignorable();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseignorable();
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c168(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseattributeSimpleValueDoubleQuote() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c174.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c174.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c175); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c171(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseattributesHandlebars();
      }

      return s0;
    }

    function peg$parseattributesHandlebars() {
      var s0;

      s0 = peg$parseattributesHandlebarsBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parseattributesHandlebarsSingle();
      }

      return s0;
    }

    function peg$parseattributesHandlebarsBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseattributeHandlebarsBlock();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributesHandlebarsBlock();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c176(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseattributeHandlebarsBlock();
      }

      return s0;
    }

    function peg$parseattributeHandlebarsBlock() {
      var s0;

      s0 = peg$parseattributeHandlebarsBlockIF();
      if (s0 === peg$FAILED) {
        s0 = peg$parseattributeHandlebarsBlockEACH();
        if (s0 === peg$FAILED) {
          s0 = peg$parseattributeHandelbarsBlockUNLESS();
          if (s0 === peg$FAILED) {
            s0 = peg$parseattributeHandlebarsBlockGENERIC();
          }
        }
      }

      return s0;
    }

    function peg$parseattributeHandlebarsBlockIF() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c88) {
        s1 = peg$c88;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselookUpWords();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c90) {
                s5 = peg$c90;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c91); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseignorable();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseignorable();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseitemList();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseignorable();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseignorable();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsehandlebarsIfElseBlock();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseignorable();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseignorable();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c92) {
                            s11 = peg$c92;
                            peg$currPos += 7;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c93); }
                          }
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c177(s3, s6, s7, s8, s9, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeHandlebarsBlockEACH() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c95) {
        s1 = peg$c95;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselookUpWords();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c90) {
                s5 = peg$c90;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c91); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseignorable();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseignorable();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseitemList();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseignorable();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseignorable();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsehandlebarsIfElseBlock();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseignorable();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseignorable();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 9) === peg$c97) {
                            s11 = peg$c97;
                            peg$currPos += 9;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c98); }
                          }
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c178(s3, s6, s7, s8, s9, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeHandelbarsBlockUNLESS() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c100) {
        s1 = peg$c100;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselookUpWords();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c90) {
                s5 = peg$c90;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c91); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseitemList();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsehandlebarsIfElseBlock();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 11) === peg$c102) {
                            s11 = peg$c102;
                            peg$currPos += 11;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                          }
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c179(s3, s6, s7, s8, s9, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehandlebarsIfElseBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c110) {
        s1 = peg$c110;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseignorable();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseignorable();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseitemList();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c180(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeHandlebarsBlockGENERIC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c105) {
        s1 = peg$c105;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseword();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseparams();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c90) {
                  s6 = peg$c90;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseignorable();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseignorable();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseitemList();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseignorable();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseignorable();
                      }
                      if (s9 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c107) {
                          s10 = peg$c107;
                          peg$currPos += 3;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c108); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseword();
                          if (s11 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c90) {
                              s12 = peg$c90;
                              peg$currPos += 2;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c91); }
                            }
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c181(s2, s4, s8, s11);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributesHandlebarsSingle() {
      var s0;

      s0 = peg$parseattributeHandlebarsSingleSAFE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseattributeHandlebarsSingleGENERICSAFE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseattributeHandlebarsSingleUNSAFE();
          if (s0 === peg$FAILED) {
            s0 = peg$parseattributeHandlebarsSingleGENERICUNSAFE();
            if (s0 === peg$FAILED) {
              s0 = peg$parseattributeHandlebarsSingleCOMMENT();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseattributeHandlebarsSingleSAFE() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 4) === peg$c117) {
          s3 = peg$c117;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselookUpWords();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c90) {
                  s6 = peg$c90;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c182(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeHandlebarsSingleGENERICSAFE() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 3) === peg$c4) {
          s3 = peg$c4;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 4) === peg$c117) {
            s4 = peg$c117;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c118); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseword();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseparams();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c90) {
                        s9 = peg$c90;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c91); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c183(s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeHandlebarsSingleUNSAFE() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c120) {
        s1 = peg$c120;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 4) === peg$c117) {
          s3 = peg$c117;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselookUpWords();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c122) {
                  s6 = peg$c122;
                  peg$currPos += 3;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c123); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c184(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeHandlebarsSingleGENERICUNSAFE() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c120) {
        s1 = peg$c120;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 4) === peg$c117) {
          s3 = peg$c117;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseword();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseparams();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c122) {
                    s7 = peg$c122;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c123); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c185(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeHandlebarsSingleCOMMENT() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c126) {
        s1 = peg$c126;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseattributeHandlebarsSingleCOMMENTToken();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseattributeHandlebarsSingleCOMMENTToken();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c128) {
            s3 = peg$c128;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c129); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c186(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeHandlebarsSingleCOMMENTToken() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c128) {
        s2 = peg$c128;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c131(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c187.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c188); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c187.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c188); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c189(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseignorable() {
      var s0;

      if (peg$c190.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }

      return s0;
    }

    function peg$parsespace() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c192;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }

      return s0;
    }



    	//@method joinAttributeSpaces Given a group of ignorable characters (spaces, enters, tabs, etc) this method clean it an returns only the valid spaces
    	//@param {Array<Character>} spaces Please notice this is just an array of string, but based on how PEG works each string will be 1 character long
    	//@param {String} Final string containing only spaces
    	function joinAttributeSpaces (spaces)
    	{
    		return isArray(spaces) ? spaces.join('').replace(/\t|\n/g, '') : '';
    	}

    	//@method isArray Auxiliary method to determine is an object is or not an array
    	//@param {Object} obj
    	//@return {Boolean} True if the parameter passed in is an array false otherwise
     	function isArray (obj)
    	{
    		return Object.prototype.toString.call(obj) === '[object Array]';
    	}

    	//@method generateAttributeSpaceNode Generates an artificial singleKey attribute node to represent spaces among values
    	//We add the ignored space as they play an important role when setting a property's value
    	//name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
    	//@param {String} spaces_value String containing all the spaces to add
    	//@return {ExtraSpaceSimpleKeyHTMLAttributeASTNode}
    	function generateAttributeSpaceNode (space_value)
    	{
    		//@class ExtraSpaceSimpleKeyHTMLAttributeASTNode @extends SimpleKeyHTMLAttributeASTNode
    		return {
    			//@property {String} type Value 'singleKey'
    			type: 'singleKey'
    			//@property {String} subType Value 'extraSpaces'
    		,	subType: 'extraSpaces'
    			//@property {String} value Variable length string of only spaces
    		,	value: space_value
    		};
    		//@class HandlebarsGrammarContext
    	}

    	//@method generateAndConcatAttributeSpaceNode Auxiliary method used to concatenate spaces in the middle of two arrays.
    	//The spaces are converted into a ExtraSpaceSimpleKeyHTMLAttributeASTNode object and is appended only of the length of the string space is greater than 0
    	//@param {Array<AttributeASTNode>|AttributeASTNode} accumulator_nodes
    	//@param {Array<Character>} spaces Please notice this is just an array of string, but based on how PEG works each string will be 1 character long
    	//@param {Array<AttributeASTNode>?|AttributeASTNode?} tail_values This value is optional
    	//@return {Array<AttributeASTNode>} Result after concatenating all values
    	function generateAndConcatAttributeSpaceNode (accumulator_nodes, spaces, tail_values)
    	{
    		var spaces_value = joinAttributeSpaces(spaces)
    		,	result = [];

    		accumulator_nodes = accumulator_nodes instanceof Array ? accumulator_nodes : [accumulator_nodes];

    		if (spaces_value.length)
    		{
    			var spaces_obj = generateAttributeSpaceNode(spaces_value);

    			result = accumulator_nodes.concat(spaces_obj);
    			result = !!tail_values ? result.concat(tail_values) : result;
    		}
    		else
    		{
    			result = !!tail_values ? accumulator_nodes.concat(tail_values) : accumulator_nodes;
    		}

    		return result;
    	}

    	//@method concatSortedSpaces Auxiliary method used to concatenate an array in the middle of spaces
    	//@param {Array<Character>} head_spaces This value is optional
    	//@param {Array<AttributeASTNode>?|AttributeASTNode?} body_nodes This value is optional
    	//@param {Array<Character>} tail_spaces This value is optional
    	//@return {Array<AttributeASTNode>}
    	function concatSortedSpaces (head_spaces, body_nodes, tail_spaces)
    	{
    		var result = []
    		,	head_space_word = joinAttributeSpaces(head_spaces || '')
    		,	tail_space_word = joinAttributeSpaces(tail_spaces || '');

    		if (head_space_word.length)
    		{
    			result = result.concat(generateAttributeSpaceNode(head_spaces));
    		}
    		if (body_nodes)
    		{
    			result = result.concat(body_nodes);
    		}

    		if (tail_space_word.length)
    		{
    			result = result.concat(generateAttributeSpaceNode(tail_space_word));
    		}

    		return result;
    	}

    	//@method getHandlebarsBaseConditionObject Auxiliary method to generate condition nodes
    	//@param {Array<String>} condition
    	//@param {String?} type String type to override default 'handlebars' type
    	//@param {String?} prefix Optional prefix to add to the subType of the returning object
    	//@return {HandlebarsBaseConditionNodeAST}
    	function getHandlebarsBaseConditionObject (condition, type, prefix)
    	{
    		prefix = prefix || '';
    		type = type || 'handlebars';

    		//@class HandlebarsBaseConditionNodeAST
    		var condition_obj = {
    				//@property {String} type Value 'handlebars'
    				type: type
    				//@property {String} subType Possible values:
    				// 'LOOKUPSINGLE' in case the condition is a look up (Array of String),
    				// 'REFERENCEEVALUATION' in case the condition is a reference values (a string IN THE TEMPLATE starting with '@'),
    				// 'SINGLEEVALUATION' in the the condition is a simple string denoting a simple evaluation
    				// This values are used with the prefix 'ATTR' when this nodes are created in the context of an attribute
    			,	subType: ''
    				//@property {String|Array<String>} value The condition
    			,	value: condition
    			};
    		//@class HandlebarsGrammarContext

    		if (condition.length > 1)
    		{
    			condition_obj.subType = prefix + 'LOOKUPSINGLE';
    			condition_obj.value = condition;
    		}
    		else if (condition[0].indexOf('@') === 0)
    		{
    			condition_obj.subType = prefix + 'REFERENCEEVALUATION';
    			condition_obj.value = condition[0];
    		}
    		else
    		{
    			condition_obj.subType = prefix + 'SINGLEEVALUATION';
    			condition_obj.value = condition[0];
    		}

    		return condition_obj;
    	}



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
