//@module blueHTML.Adapters
//@class IncrementalDOMAdapter @extend Adapter
var adapter = {
	//@property {String} Name
	name: 'ID'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//													ATTRS 																	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//@method defineAttribute
	//@param {CodeGenerationContext} code_generation_context
	//@param {String} object_name Name of the object used to accumulate the result of the code generation process
	//@param {String} property_name Name of the property to define. Please notice that this value will come formatted. This means that if it is a string it will already have its quotes.
	// Besides notice that it can also be a piece of code
	//@return {String}
,	defineAttribute: function (code_generation_context, object_name, property_name)
	{
		'use strict';

		return object_name + '['+property_name+']="";';
	}
	//@method accumulateFinalAttributesResult Wrap up the final result get after all attributes were converted to code
	//@param {CodeGenerationContext} code_generation_context
	//@param {String} attributes_result
	//@return {String}
,	accumulateFinalAttributesResult: function (code_generation_context, attributes_result)
	{
		'use strict';

		if (attributes_result)
		{
			return '(function (){var '+code_generation_context.objectName+' = {}; ' + attributes_result + 'return '+code_generation_context.objectName+';})()';
		}
		return '{}';
	}
	//@method setPropertysValue
	//@param {CodeGenerationContext} code_generation_context
	//@param {String} property_definition String generated by the invocation of the method defineProperty
	//@param {String} property_accumulated_values Result of the code generation process applied to all the properties value
	//@return {String}
,	setAttributeValue: function (code_generation_context, property_definition,  property_accumulated_values)
	{
		'use strict';

		return property_definition + property_accumulated_values;
	}
	//@method accumulatePropertysValue
	//@param {CodeGenerationContext} code_generation_context
	//@param {String} object_name Name of the object used to accumulate the result of the code generation process
	//@param {String} property_value Value of the property to set
	//@return {String}
,	accumulateAttributeValue: function (code_generation_context, object_name, property_value)
	{
		'use strict';

		return object_name + '["'+code_generation_context.keyName+'"]+=' + property_value +';';
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//													TAGS 																	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//@method defineOpenTag
	//@param {CodeGenerationContext} code_generation_context
	//@param {String} attributes_result Result of generating the code to all of the tag attributes
	//@param {String} tag_type Name of the new tag being defined
	//@return {String}
,	defineOpenTag: function (code_generation_context, tag_type, attributes_result)
	{
		'use strict';

		return 'elementOpen("' + tag_type + '","", '+ attributes_result + ');';
	}
	//@method defineVoidTag
	//@param {CodeGenerationContext} code_generation_context
	//@param {String} attributes_result Result of generating the code to all of the tag attributes
	//@param {String} tag_type Name of the new tag being defined
	//@return {String}
,	defineVoidTag: function (code_generation_context, tag_type, attributes_result)
	{
		'use strict';

		return 'elementVoid("' + tag_type + '","", '+ attributes_result +');';
	}
	//@method defineCloseTag
	//@param {CodeGenerationContext} code_generation_context
	//@param {String} attributes_result Result of generating the code to all of the tag attributes
	//@param {String} tag_type Name of the new tag being defined
	//@return {String}
,	defineCloseTag: function (code_generation_context, tag_type, attributes_result)
	{
		'use strict';

		return 'elementClose("' + tag_type + '","",'+ attributes_result +');';
	}
	//@method defineTextTag
	//@param {CodeGenerationContext} code_generation_context
	//@param {String} text Take into account that this variable can contain code to be evaluated!
	//@return {String}
,	defineTextTag: function (code_generation_context, text)
	{
		'use strict';

		return 'text(' + text + ');';
	}


	//@method accumulateFinalTagsResult Wrap up the final result get after all tags were converted to code. Please notice that at this point the string code
	//passed in generation_result parameter contains the entire resulting code
	//@param {CodeGenerationOptions} options
	//@param {CodeGenerationResult} geneation_result
	//@return {geneation_result}
,	accumulateFinalTagsResult: function (options, generation_result)
	{
		'use strict';

		if (!options.notGenerateContext)
		{
			var deps = generation_result.contextName + (generation_result.externalDependencies.length > 0 ? ',' +generation_result.externalDependenciesObjectName : '' );
			var function_wraps = 'function elementOpen (element_type, static_attrs, obj_attrs)' +
			'{' +
				'var params = [];' +
				'_.each(obj_attrs, function (value, key) {' +
					'params.push(key, value);' +
				'});' +
				'params.unshift(element_type,null,null);' +
				'return IncrementalDOM.elementOpen.apply(IncrementalDOM, params);' +
			'}' +
			'function elementVoid (element_type, static_attrs, obj_attrs)' +
			'{' +
				'var params = [];' +
				'_.each(obj_attrs, function (value, key) {' +
					'params.push(key, value);' +
				'});' +
				'params.unshift(element_type,null,null);' +
				'return IncrementalDOM.elementVoid.apply(IncrementalDOM, params);' +
			'}' +
			'function elementClose (element_type, static_attrs, obj_attrs)' +
			'{' +
				'var params = [];' +
				'_.each(obj_attrs, function (value, key) {' +
					'params.push(key, value);' +
				'});' +
				'params.unshift(element_type,null,null);' +
				'return IncrementalDOM.elementClose.apply(IncrementalDOM, params);' +
			'}' +
			'var text = IncrementalDOM.text;\n';
			generation_result.value = 'function ('+deps+') { ' + function_wraps + generation_result.value + '}';
		}

		return generation_result;
	}
};

module.exports = adapter;